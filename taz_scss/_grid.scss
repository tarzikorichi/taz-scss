@use 'sass:math';

$grid_columns: 12;
$grid_gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
  max: 100vw,
  100m: 100px,
);

// ..container{
//     width: 100%;
//     max-width: 1200px;
//     margin: 0 auto;
//     padding: 0 20px;
//     box-sizing: border-box;
// }

@mixin container($max-w: 1140px, $p:20px) {
    width: 100%;
    max-width: $max-w;
    margin: 0 auto;
    padding: 0 $p;
    box-sizing: border-box;
}

.container {
    @include container;
}
@each $key, $val in $container-max-widths {
    @if($key == 100m) {
        .container-#{$key} {
            @include container(100vw, $val);
        }
    }@else {
        .container-#{$key} {
            @include container($val);
        }
    }
}


.row{
    display: flex;
    flex-flow: row wrap;
}

// grid gaps

@each $key, $val in $grid_gaps {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

// justify content

@each $key in $layout-values{
    .justify-#{$key} {
        justify-content: $key;
    }
}

// col classes

@include xs {
    @for $i from 1 through $grid_columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid_columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid_columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid_columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid_columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid_columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid_columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid_columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid_columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid_columns);
        }
    }
}
